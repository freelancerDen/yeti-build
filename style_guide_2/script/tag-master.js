import {
  handleFocusInput,
  handleFocusOutInput,
  handleChangeInput,
} from './input.js';

const rowTemplate = document.querySelector('#tagMasterRowTemplate');
const container = document.querySelector('.tagMasterContainer');

/**
 * The function fetchData asynchronously fetches data from a JSON file and returns it as a JavaScript
 * object, handling errors if the fetch fails.
 * @returns The `fetchData` function is returning a Promise that resolves to the JSON data fetched from
 * the './style_guide_2/script/tag-master.json' file. If the data is fetched successfully, the JSON
 * data will be returned. If there is an error during the fetching process, an error message will be
 * logged to the console.
 */
async function fetchData() {
  try {
    const response = await fetch('./style_guide_2/script/tag-master.json');
    if (!response.ok) {
      throw new Error('Failed to fetch data');
    }
    return await response.json();
  } catch (error) {
    console.error('Error during fetching data:', error);
  }
}

/**
 * The function `generateUID` generates a unique identifier by combining the current timestamp and a
 * random number.
 * @returns A unique identifier (UID) is being returned by the `generateUID` function. The UID is
 * generated by concatenating the current timestamp in base 36 with a random number in base 36.
 */
function generateUID() {
  return Date.now().toString(36) + Math.random().toString(36).substring(2);
}

/**
 * The function `handleRemoveTagClick` removes the closest parent element with the class 'tagMasterRow'
 * when a click event is triggered.
 * @param event - The `event` parameter in the `handleRemoveTagClick` function represents the event
 * that occurred, such as a click event on a specific element. It contains information about the event,
 * such as the target element that triggered the event.
 */
function handleRemoveTagClick(event) {
  const { currentTarget } = event;

  const rowElement = currentTarget.closest('.tagMasterRow');

  rowElement.remove();
}

/**
 * The `renderField` function clones a template, populates it with data, and adds event listeners
 * before appending it to a container.
 */
function renderField({ id, name }) {
  const clone = rowTemplate.content.cloneNode(true);

  const rowElement = clone.querySelector('.tagMasterRow');
  const input = clone.querySelector('input');
  const nameField = clone.querySelector('.tagMasterName');
  const removeButton = clone.querySelector('.removeTagButton');

  rowElement.setAttribute('id', id);
  nameField.textContent = name;

  removeButton.addEventListener('click', handleRemoveTagClick);
  input.addEventListener('focus', handleFocusInput);
  input.addEventListener('blur', handleFocusOutInput);
  input.addEventListener('input', handleChangeInput);

  container.appendChild(clone);
}

/**
 * The function `handleCreateTagClick` creates a new tag with a unique ID and name, and renders it on
 * the field.
 */
function handleCreateTagClick() {
  const createNewInput = document.querySelector('.createNewTagInput');
  const name = createNewInput.textContent.trim();
  const id = generateUID();

  if (name !== '') {
    renderField({ id, name });
    createNewInput.textContent = '';
  }
}

/**
 * The function `setEventListeners` sets up an event listener for a button with the class
 * `createNewTagButton` that triggers the `handleCreateTagClick` function when clicked.
 */
function setEventListeners() {
  const createNewButton = document.querySelector('.createNewTagButton');

  createNewButton.addEventListener('click', handleCreateTagClick);
}

/**
 * The `init` function asynchronously fetches data, renders fields based on the data, and sets event
 * listeners.
 * @returns If the `data` is falsy or not an object, the function will return early and not execute the
 * rest of the code.
 */
async function init() {
  const data = await fetchData();

  if (!data || typeof data !== 'object') return;

  data.fields.forEach((item) => {
    renderField(item);
  });

  setEventListeners();
}

init();
